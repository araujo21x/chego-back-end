// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.29.3
// source: pricing.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "pricing";

export interface GetPriceQuoteRequest {
  distance: number;
}

export interface PriceQuoteResponse {
  distance: number;
  price: number;
  currency: string;
}

export const PRICING_PACKAGE_NAME = "pricing";

function createBaseGetPriceQuoteRequest(): GetPriceQuoteRequest {
  return { distance: 0 };
}

export const GetPriceQuoteRequest: MessageFns<GetPriceQuoteRequest> = {
  encode(message: GetPriceQuoteRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.distance !== 0) {
      writer.uint32(9).double(message.distance);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetPriceQuoteRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPriceQuoteRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.distance = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBasePriceQuoteResponse(): PriceQuoteResponse {
  return { distance: 0, price: 0, currency: "" };
}

export const PriceQuoteResponse: MessageFns<PriceQuoteResponse> = {
  encode(message: PriceQuoteResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.distance !== 0) {
      writer.uint32(9).double(message.distance);
    }
    if (message.price !== 0) {
      writer.uint32(17).double(message.price);
    }
    if (message.currency !== "") {
      writer.uint32(26).string(message.currency);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PriceQuoteResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePriceQuoteResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.distance = reader.double();
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.price = reader.double();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.currency = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

export interface PricingServiceClient {
  getPriceQuote(request: GetPriceQuoteRequest): Observable<PriceQuoteResponse>;
}

export interface PricingServiceController {
  getPriceQuote(
    request: GetPriceQuoteRequest,
  ): Promise<PriceQuoteResponse> | Observable<PriceQuoteResponse> | PriceQuoteResponse;
}

export function PricingServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getPriceQuote"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("PricingService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("PricingService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const PRICING_SERVICE_NAME = "PricingService";

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
}
